import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext.kotlin_version = '1.3.10' // Required for Kotlin integration
    ext.spring_boot_version = '2.1.2.RELEASE'

    ext.password= project.hasProperty('password') ? project.getProperty('password') : 'default'
    ext.username = project.hasProperty('username') ? project.getProperty('username') : 'default'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version" // Required for Kotlin integration
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "com.bmuschko:gradle-cargo-plugin:2.2.3"
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0"
    }
}

plugins {
    id 'java'
    id "org.jetbrains.kotlin.kapt" version "1.3.21"
    id 'org.hidetake.ssh' version '2.10.1'
}

remotes {
    prod {
        host = 'clmb.live'
        user = 'ubuntu'
        identity = file('.ssh/clmb.live.pem')
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8

sourceSets {
    main.java.srcDirs += "build/generated/source/apt/main"
}

apply plugin: 'kotlin' // Required for Kotlin integration
apply plugin: "kotlin-spring" // https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'
apply plugin: 'com.palantir.docker'
apply plugin: "kotlin-noarg"

group = 'jespersolver'

task deleteTmpWeb(type: Delete) {
    delete 'tmpWeb'
}

task web(type:Exec) {
    workingDir '../web'

    if(System.out.println(Os.isFamily(Os.FAMILY_WINDOWS))) {
        commandLine 'cmd', '/c', 'npm'
    } else {
        commandLine 'npm'
    }

    args 'run', 'build'
}

task copyWeb(type: Copy) {
    dependsOn web
    from '../web/build'
    into 'tmpWeb'
}

task admin(type:Exec) {
    workingDir '../admin'

    if(System.out.println(Os.isFamily(Os.FAMILY_WINDOWS))) {
        commandLine 'cmd', '/c', 'npm'
    } else {
        commandLine 'npm'
    }

    args 'run', 'build'
}

task copyAdmin(type: Copy) {
    dependsOn admin
    from '../admin/build'
    into 'tmpWeb/admin'
}

bootJar {
    dependsOn deleteTmpWeb
    dependsOn copyWeb
    dependsOn copyAdmin
    copyWeb.mustRunAfter deleteTmpWeb
    copyAdmin.mustRunAfter deleteTmpWeb
    launchScript()

    baseName = 'scoreboard'
    version = '0.1.0'

    from('tmpWeb') {
        into 'public'
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.prod) {
                put from: "$buildDir/libs/scoreboard-0.1.0.jar", into: '/opt/scoreboard/'
                execute 'sudo service scoreboard restart'
            }
        }
    }
}

war {
    dependsOn deleteTmpWeb
    dependsOn copyWeb
    dependsOn copyAdmin
    copyWeb.mustRunAfter deleteTmpWeb
    copyAdmin.mustRunAfter deleteTmpWeb

    enabled = true
    webAppDirName = 'tmpWeb'
    
    webInf { from 'src/webInf' }
}

cargo {

    containerId = 'tomcat7x'
    port=9099

    deployable {
        context = 'mixnmatch'
    }

    remote {
        hostname = 'localhost'
    }

    remote.username = username
    remote.password = password

    System.out.println("Deploying with username " + remote.username + " and password " + remote.password)
}

repositories {
    jcenter()
}

ext {
    mapstructVersion = "1.3.0.Final"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Required for Kotlin integration
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "com.google.code.gson:gson:2.8.5"
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"
    implementation "org.hibernate:hibernate-core:5.4.2.Final"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.apache.poi:poi:3.17"
    implementation "org.apache.pdfbox:pdfbox:2.0.13"
    implementation "com.google.zxing:core:3.3.0"
    implementation 'com.google.zxing:javase:3.3.0'
    implementation 'com.auth0:java-jwt:3.8.1'
    implementation 'com.auth0:jwks-rsa:0.8.2'
    
    implementation 'com.github.kittinunf.fuel:fuel:2.1.0'

    runtimeOnly "mysql:mysql-connector-java"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.hibernate:hibernate-testing:5.3.7.Final"
    testImplementation "com.h2database:h2:1.4.196"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    kapt "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}
