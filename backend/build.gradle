import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        kotlinVersion = '1.3.10'
        springBootVersion = '2.2.4.RELEASE'
        mapstructVersion = "1.3.1.Final"
        junitVersion = "5.4.2"
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
}

plugins {
    id 'java'
    id "org.jetbrains.kotlin.kapt" version "1.3.21"
    id 'org.hidetake.ssh' version '2.10.1'
    id 'com.palantir.git-version' version '0.12.2'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id "org.jetbrains.kotlin.jvm" version "1.3.10"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.10"
    id 'org.jetbrains.kotlin.plugin.jpa' version "1.3.10"
    id "org.jetbrains.kotlin.plugin.noarg" version "1.3.10"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "com.gradle.build-scan" version "1.16"
}

group = 'app.climblive'
version = gitVersion()

repositories {
    jcenter()
}

springBoot {
    buildInfo()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

processResources {
    with copySpec {
        from 'src/main/resources'
        include '**/application*.properties'
        project.properties.findAll().each {
          prop ->
            if (prop.value != null) {
                filter(ReplaceTokens, tokens: [ (prop.key): prop.value])
            }
        }
    }
}

remotes {
    prod {
        host = siteDomain
        user = 'travis'
        identity = file('.ssh/travis.pem')
        passphrase = "$System.env.TRAVIS_PRIVATE_KEY_PASSPHRASE"
        knownHosts = allowAnyHosts
    }
}

task deleteTmpWeb(type: Delete) {
    delete 'tmpWeb'
}

task web() {
    doLast {
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(siteDomain\\s*=\\s*).*/\\1\"$siteDomain\";/g", '../web/src/environment.tsx'
        }
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(projectVersion\\s*=\\s*).*/\\1\"${gitVersion()}\";/g", '../web/src/environment.tsx'
        }
        exec {
            workingDir '../web'

            if (System.out.println(Os.isFamily(Os.FAMILY_WINDOWS))) {
                commandLine 'cmd', '/c', 'npm'
            } else {
                commandLine 'npm'
            }

            args 'run', 'build'
        }
    }
}

task copyWeb(type: Copy) {
    dependsOn web
    from '../web/build'
    into 'tmpWeb'
}

task admin() {
    doLast {
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(siteDomain\\s*=\\s*).*/\\1\"$siteDomain\";/g", '../admin/src/environment.tsx'
        }
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(projectVersion\\s*=\\s*).*/\\1\"${gitVersion()}\";/g", '../admin/src/environment.tsx'
        }
        exec {
            workingDir '../admin'

            if (System.out.println(Os.isFamily(Os.FAMILY_WINDOWS))) {
                commandLine 'cmd', '/c', 'npm'
            } else {
                commandLine 'npm'
            }

            args 'run', 'build'
        }
    }
}

task copyAdmin(type: Copy) {
    dependsOn admin
    from '../admin/build'
    into 'tmpWeb/admin'
}

bootJar {
    dependsOn deleteTmpWeb
    dependsOn copyWeb
    dependsOn copyAdmin
    copyWeb.mustRunAfter deleteTmpWeb
    copyAdmin.mustRunAfter deleteTmpWeb
    launchScript()

    baseName = 'climblive'
    version = gitVersion()

    from('tmpWeb') {
        into 'public'
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.prod) {
                put from: "$buildDir/libs/climblive-${gitVersion()}.jar", into: '/home/travis'
                execute "mv ~/climblive-${gitVersion()}.jar ~/uploads"
            }
        }
    }
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

configurations {
    testImplementation {
        exclude group: 'junit', module: 'junit'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "com.google.code.gson:gson:2.8.5"
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"
    implementation "org.hibernate:hibernate-core:5.4.2.Final"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.apache.poi:poi:3.17"
    implementation "org.apache.pdfbox:pdfbox:2.0.13"
    implementation "com.google.zxing:core:3.3.0"
    implementation 'com.google.zxing:javase:3.3.0'
    implementation 'com.auth0:java-jwt:3.8.1'
    implementation 'com.auth0:jwks-rsa:0.8.2'
    compile 'io.swagger:swagger-annotations:1.6.0'
    implementation "org.mapstruct:mapstruct:$mapstructVersion"

    kapt "org.mapstruct:mapstruct-processor:$mapstructVersion"

    runtimeOnly "mysql:mysql-connector-java"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.hibernate:hibernate-testing:5.3.7.Final"
    testImplementation "com.h2database:h2:1.4.196"
    testCompile "org.assertj:assertj-core:3.11.1"
}
