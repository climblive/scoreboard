import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.hidetake.ssh' version '2.10.1'
    id 'com.palantir.git-version' version '0.12.3'
    id 'org.springframework.boot' version "${springBootVersion}"
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.jpa' version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.noarg" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

def buildNumber = gitVersion()

group = 'app.climblive'
version = buildNumber

repositories {
    mavenCentral()
}

springBoot {
    buildInfo()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    with copySpec {
        from 'src/main/resources'
        include '**/application*.properties'
        expand(project.properties)
    }
}

remotes {
    prod {
        host = siteDomain
        user = 'travis'
        identity = file('.ssh/travis.pem')
        passphrase = "$System.env.SSH_PASSPHRASE"
        knownHosts = allowAnyHosts
    }
}

task deleteTmpWeb(type: Delete) {
    delete 'tmpWeb'
}

task web() {
    doLast {
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(siteDomain\\s*=\\s*).*/\\1\"$siteDomain\";/g", '../web/src/environment.tsx'
        }
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(projectVersion\\s*=\\s*).*/\\1\"${buildNumber}\";/g", '../web/src/environment.tsx'
        }
        exec {
            workingDir '../web'

            if (System.out.println(Os.isFamily(Os.FAMILY_WINDOWS))) {
                commandLine 'cmd', '/c', 'npm'
            } else {
                commandLine 'npm'
            }

            args 'run', 'build'
        }
    }
}

task copyWeb(type: Copy) {
    dependsOn web
    from '../web/build'
    into 'tmpWeb'
}

task admin() {
    doLast {
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(siteDomain\\s*=\\s*).*/\\1\"$siteDomain\";/g", '../admin/src/environment.tsx'
        }
        exec {
            commandLine 'sed'
            args '-i', '-E', "s/(projectVersion\\s*=\\s*).*/\\1\"${buildNumber}\";/g", '../admin/src/environment.tsx'
        }
        exec {
            workingDir '../admin'

            if (System.out.println(Os.isFamily(Os.FAMILY_WINDOWS))) {
                commandLine 'cmd', '/c', 'npm'
            } else {
                commandLine 'npm'
            }

            args 'run', 'build'
        }
    }
}

task copyAdmin(type: Copy) {
    dependsOn admin
    from '../admin/build'
    into 'tmpWeb/admin'
}

bootJar {
    dependsOn deleteTmpWeb
    dependsOn copyWeb
    dependsOn copyAdmin
    copyWeb.mustRunAfter deleteTmpWeb
    copyAdmin.mustRunAfter deleteTmpWeb
    launchScript()

    archiveBaseName = 'climblive'
    archiveVersion = buildNumber

    from('tmpWeb') {
        into 'public'
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

task deploy {
    doLast {
        ssh.run {
            session(remotes.prod) {
                put from: "$buildDir/libs/climblive-${buildNumber}.jar", into: '/home/travis'
                execute "mv ~/climblive-${buildNumber}.jar ~/uploads"
            }
        }
    }
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

configurations {
    testImplementation {
        exclude group: 'junit', module: 'junit'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "com.google.code.gson:gson:2.8.9"
    implementation "io.springfox:springfox-swagger2:$springfoxVersion"
    implementation "io.springfox:springfox-swagger-ui:$springfoxVersion"
    implementation "org.hibernate:hibernate-core:$hibernateVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.apache.poi:poi:3.17"
    implementation "org.apache.pdfbox:pdfbox:2.0.24"
    implementation "com.google.zxing:core:3.4.1"
    implementation 'com.google.zxing:javase:3.4.1'
    implementation 'com.auth0:java-jwt:3.18.1'
    implementation 'com.auth0:jwks-rsa:0.20.0'
    implementation 'io.swagger:swagger-annotations:1.6.3'
    implementation "org.mapstruct:mapstruct:$mapstructVersion"
    implementation 'org.flywaydb:flyway-core:6.2.4'
    implementation 'com.google.guava:guava:31.0.1-jre'

    kapt "org.mapstruct:mapstruct-processor:$mapstructVersion"

    runtimeOnly "mysql:mysql-connector-java"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.hibernate:hibernate-testing:$hibernateVersion"
    testImplementation "com.h2database:h2:1.4.196"
    testImplementation "org.assertj:assertj-core:3.21.0"
}
